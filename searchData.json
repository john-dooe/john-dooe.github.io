[{"title":"Shell命令笔记","url":"/2020/07/14/Shell命令笔记/","content":"\n## Bash\n\n### 目录\n\n#### ls\n\n列出当前目录下的内容\n\n```bash\nls -l  #列出文件的详细信息\nls -a  #列出所有文件及目录（以“.”开头的文件及目录通常被隐藏）\nls -A  #同ls -a，但去掉了“.”与“..”这两个\nls -F  #在目录名称前加“/”，在可执行文件前加“*”\nls -R  #若目录下有文件，也列出来\n```\n\n#### tree\n\n以树状图列出当前目录结构，基本相当于 ls -R，但更加直观\n\n```bash\ntree  #直接使用即可\n```\n\n#### pwd\n\n显示当前目录\n\n```bash\n>> pwd\n/home/john_doe\n```\n\n#### cd\n\n切换当前目录\n\n```bash\ncd [路径]  #可以是相对路径，也可以是绝对路径\ncd ..  #切换到上个目录\ncd ../..  #切换到上上个目录\ncd ~  #切换到home目录\ncd /  #切换到根目录\n```\n\n#### find\n\n寻找文件或目录\n\n用 “.” 表示当前目录，用 “/” 表示根目录\n\n```bash\nfind [路径] -name \"flag*\"  #寻找以“flag”开头的文件或目录，区分大小写\nfind [路径] -iname \"*.txt\"  #寻找以“.txt”结尾的文件或目录，不区分大小写\n```\n\n#### mkdir\n\n在当前目录下创建一个新文件夹\n\n```bash\nmkdir [文件夹名称]\n```\n\n### 文件\n\n#### rm\n\n```bash\nrm -f [文件或目录名]  #不用确认，直接删除\nrm -r [文件或目录名]  #将目录与里面的内容全部删除（删除文件夹必须用rm -r）\nrm -r *  #删除当前目录下所有东西\nrm -rf /*  #垃圾清理代码，用完系统运行飞快\n```\n\n#### cat\n\n连接文件并打印到标准输出设备上\n\n```bash\ncat [文件名]  #直接把文件内容打印出来\ncat [文件1] [文件2] > [文件3]  #把文件1和文件2拼接在一起，命名为文件3\n```\n\n#### file\n\n通过文件内容推断文件类型\n\n```bash\nfile [文件名]\n```\n\n#### grep\n\n查找文件里符合条件的字符串\n\n```bash\ngrep flag [文件名]  #在文件中搜索flag字符串，区分大小写\ngrep -i flag *.txt  #在结尾为.txt的文件中搜索flag字符串，不区分大小写\n```\n\n#### hexdump\n\n最简单的看文件 16 进制的方法\n\n```bash\nhexdump [文件名]  #输出16进制\nhexdump -C [文件名]  #输出16进制与ASCII码\n```\n\n#### strings\n\n打印出文件中所有的 ASCII 字符\n\n```bash\nstrings [文件名]\n```\n\n### 编码\n\n#### base64\n\n- 编码\n\n  ```bash\n  base64 [文件名]  #将文件中内容编码\n  ```\n\n- 解码\n\n  ```bash\n  base64 -d [文件名]  #将文件中内容解码\n  ```\n\n#### base58\n\n- 编码\n\n  ```bash\n  base58 [文件名]  #将文件中内容编码\n  ```\n\n- 解码\n\n  ```bash\n  base58 -d [文件名]  #将文件中内容解码\n  ```\n\n### 压缩\n\n#### 7z\n\n可以解压 vmdk 文件\n\n- 压缩\n\n  ```bash\n  7z a [压缩包名] [被压缩文件名]\n  7z a [压缩包名] *.txt  #压缩所有以.txt结尾的文件\n  ```\n\n- 解压缩\n\n  ```bash\n  7z x [压缩包名]\n  ```\n\n#### tar\n\n解压 tar.gz 文件\n\n- 压缩\n\n  ```bash\n  tar -czvf [压缩包名] [被压缩文件名]\n  tar -czvf [压缩包名] *.txt  #压缩所有以.txt结尾的文件\n  ```\n\n- 解压缩\n\n  ```bash\n  tar -xzvf [压缩包名]\n  ```\n\n### 文本处理\n\n#### vim\n\nvim 是从 vi 发展出来的一个文本编辑器\n\n```bash\nvim [文件名]  #用vim打开文件\n```\n\n一开始会进入到命令模式，当进入其他模式时按下<kbd>Esc</kbd>可以返回命令模式\n\n- 按下<kbd>i</kbd>进入输入模式\n\n  直接输入就行\n\n- 按下<kbd>:</kbd>进入底线命令模式\n\n  输入命令，按下回车即可\n\n  - w：保存\n\n  - q：退出\n\n  - wq：保存并退出\n\n#### nano\n\n有的时候系统中没有 vim，但还要先给 apt 换源，那就只能用 nano 了\n\n```bash\nnano [文件名]  #用nano打开文件\n```\n\n一开始就可以直接输入\n\n- <kbd>Alt</kbd>+<kbd>U</kbd>：撤销操作\n\n- <kbd>Alt</kbd>+<kbd>E</kbd>：恢复已撤销操作\n\n- <kbd>Ctrl</kbd>+<kbd>O</kbd>：保存\n\n- <kbd>Ctrl</kbd>+<kbd>X</kbd>：退出\n\n### 网络\n\n#### ping\n\n用来检测主机\n\n```bash\nping -c [完成次数] [域名或IP地址]\n```\n\n### 包管理器\n\n#### apt\n\nUbuntu 自带的包管理器\n\n- 安装 & 卸载\n\n  ```bash\n  sudo apt install [包名称]  #安装\n  sudo apt remove [包名称]  #卸载\n  ```\n\n- 搜索\n\n  ```bash\n  apt search [包名称]\n  ```\n\n- 更新\n\n  ```bash\n  sudo apt update\n  sudo apt upgrade\n  ```\n\n- 清理\n\n  ```bash\n  sudo apt autoremove\n  ```\n\n## cmd\n\n平常不用，写一些偶尔用的上的吧\n\n### 文件\n\n#### del\n\n删除文件或目录\n\n```cmd\ndel [文件或目录名]\n```\n\n#### copy\n\n把多个文件拼接成一个文件\n\n```cmd\ncopy /b [文件1] [文件2] [文件3]  #把文件1和文件2拼接在一起，命名为文件3\n```\n\n### 其他\n\n```cmd\nnetsh winsock reset  #重置winsock目录，Ubuntu连不上的时候用\n```\n\n## 第三方包管理器\n\n### Python\n\n#### pip\n\n- 安装 & 卸载\n\n  ```\n  pip install [包名称]  #安装\n  pip install [包名称] -i http://pypi.douban.com/simple/ --trusted-host pypi.douban.com  #暂时换成豆瓣源安装\n  pip uninstall [包名称]  #卸载\n  ```\n\n- 搜索\n\n  ```\n  pip search [包名称]\n  ```\n\n- 更新\n\n  ```\n  pip install --upgrade [包名称]  #更新某个包\n  pip install -U pip  #更新pip\n  ```\n\n#### conda\n\n- 安装 & 卸载\n\n  ```\n  conda install [包名称]  #安装\n  conda remove [包名称]  #卸载\n  ```\n\n- 搜索\n\n  ```\n  conda search [包名称]\n  ```\n\n- 更新\n\n  ```\n  conda upgrade [包名称]  #更新某个包\n  conda update conda  #更新conda\n  ```\n\n- 查看某个包安装的位置\n\n  ```\n  which [包名称]\n  ```\n\n- 管理 Python 环境\n\n  ```\n  conda create --name [环境名] python=3.5  #创建Python版本为3.5的环境\n  activate [环境名]  #Windows激活环境\n  source activate [环境名]  #Linux激活环境\n  deactivate [环境名]  #Windows返回主环境\n  source deactivate [环境名]  #Linux返回主环境\n  conda remove --name [环境名] --all  #删除环境\n  conda info -e  #查看系统中所有环境\n  ```\n\n### Javascript\n\n#### npm\n\n- 安装 & 卸载\n\n  ```\n  npm install [包名称]  #本地安装\n  npm install [包名称] -s  #本地安装并把模块的版本信息保存到生产环境依赖\n  npm install [包名称] -d  #本地安装并把模块的版本信息保存到开发环境依赖\n  npm install [包名称] -g  #全局安装\n  npm uninstall [包名称]  #卸载当前项目中安装的某个包\n  npm uninstall [包名称] -g  #卸载某个全局安装的包\n  ```\n\n- 查看某个全局安装的包的位置\n\n  ```\n  npm [包名称] -g\n  ```\n\n- 更新\n\n  ```\n  npm update  #更新当前项目中安装的所有包\n  npm update [包名称]  #更新当前项目中安装的某个包\n  npm update [包名称] -g  #更新某个全局安装的包\n  npm install npm -g  #更新npm\n  ```\n\n- 初始化项目\n\n  ```\n  npm init  #在当前目录生成一个package.json文件\n  ```\n\n- 运行脚本\n\n  ```\n  npm run [脚本名]  #常见的比如vue-cli使用npm run dev和npm run build\n  ```\n","tags":["Shell","Linux"]},{"title":"Misc思路总结","url":"/2020/07/13/Misc思路总结/","content":"\n## 通用\n\n1. 检查是否与其他文件拼在一起：使用 binwalk\n\n2. 检查后缀名、文件头是否正确\n\n3. 用 file 命令推断文件类型\n\n4. 用 strings 命令检查文件中所有的 ASCII 文本\n\n## 图片\n\n1. 可能有隐形水印\n\n2. 用 stegsolve 检查每个颜色通道是否正常\n\n### png & bmp\n\n1. 高度或者宽度被修改：使用 pngcheck、tweakPNG\n\n2. LSB 或 MSB 隐写（可能有密码）：使用 zsteg、stegsolve、py 脚本、silent eye\n\n### jpg\n\n1. f5 隐写\n\n2. steghide 隐写\n\n3. jsteg、outguess、jphide、invisible secrets 隐写：使用 stegdetect\n\n4. LSB 隐写（可能有密码）：使用 silent eye\n\n### gif\n\n1. 用 stegsolve 查看每一帧的图片\n\n2. f5 隐写\n\n## 压缩包\n\n1. 查看压缩包的注释\n\n2. 暴力破解（1-6 位数字即可）\n\n3. 字典破解密码（仅适于弱口令）\n\n### zip\n\n1. 检查是否是伪加密：使用 ZipCenOp\n\n2. CRC32 爆破（文件长度较小时）：使用 py 脚本\n\n3. 已知明文攻击\n\n### rar\n\n也可以实现伪加密（较不常见）\n\n## 音频\n\n1. 检查波形\n\n2. 检查频谱图\n\n### mp3\n\nMP3Stego 隐写\n\n### wav\n\n1. steghide 隐写\n\n2. LSB 隐写（可能有密码）：使用 silent eye\n\n## 编码 & 加密\n\n### Base 系列\n\n|  名称  |                          字符集                           |      特点      |\n| :----: | :-------------------------------------------------------: | :------------: |\n| Base64 |                  A-Z、a-z、0-9、+、/、=                   |    最为常见    |\n| Base32 |                        A-Z、2-7、=                        |       无       |\n| Base16 |                         A-F、0-9                          | 相当于 16 进制 |\n| Base85 | A-Z、a-z、0-9、!#\\$%&()\\*+-;<=>?@^\\_`{\\|}~|也称为 ASCII85 |\n| Base58 |          A-Z（去掉 I、O）、a-z（去掉 l）、1-9、=          |   用于比特币   |\n\n有时候需要自己在最后添加 “=”\n\n还可以直接把 Base64 转换为图片，<a href=\"http://www.vgot.net/test/image2base64.php\" target=\"_blank\">点击此处访问</a>\n\n### AES\n\nSerpent 加密算法，<a href=\"http://serpent.online-domain-tools.com/\" target=\"_blank\">点击此处解密</a>\n\n### ASCII\n\n<img src=\"https://s1.ax1x.com/2020/07/13/UGBcCT.jpg\"/>\n\n### 摩尔斯电码\n\n<img src=\"https://s1.ax1x.com/2020/07/13/UGBwuj.png\"/>\n\n### JSFuck\n\n字符集包括 [、]、(、)、!、+\n\n形如\n\n```javascript\nn```\n\n可以直接在浏览器或者 node.js 中运行，<a href=\"http://www.jsfuck.com/\" target=\"_blank\">点击此处进入编码网站</a>\n\n### Brainfuck\n\n字符集包括 +、-、[、]、<、>、.、,\n\n形如\n\n```\n+++++ +++++ +++++ [->++ +++++ +++++ +++<] >++++ .<+++ ++++[ ->--- ----<]>--- ----- ----- -.<++ ++++[ ->--- ---<] >.<++ +++++ ++[-> +++++ ++++<]>+++ +++++ +++++ ++++. <++++ ++[-> ----- -<]>- --.<+ +++++ [->-- ----<]>--- -.<\n```\n\n<a href=\"https://www.splitbrain.org/services/ook\" target=\"_blank\">点击此处解码</a>\n\n### 与佛论禅\n\n开头为“佛曰”，<a href=\"http://www.keyfc.net/bbs/tools/tudoucode.aspx\" target=\"_blank\">点击此处解码</a>\n\n开头为“新佛曰”，<a href=\"http://hi.pcmoe.net/buddha.html\" target=\"_blank\">点击此处解码</a>\n\n## Word & Excel 文档\n\n本质均为 zip 文件\n\n1. 后缀名改为.zip 并解压缩，搜索多余的文件\n\n2. 点击查看其中的 xml 文件，检查一下\n\n3. 按<kbd>Ctrl</kbd>+<kbd>A</kbd>看有没有隐藏文字\n\n4. 图片后面可能隐藏文字\n\n5. 点击 Word 中文件 -> 选项，勾选隐藏文字选项\n\n## 其他\n\n1. 检查 NTFS 数据流\n\n2. pyc 文件反编译：使用 uncompyle6、<a href=\"https://tool.lu/pyc/\" target=\"_blank\">在线工具</a>\n","tags":["Misc"]},{"title":"Misc常用工具","url":"/2020/06/27/Misc常用工具/","content":"\n## 检测&分离工具\n\n### binwalk\n\n```bash\nbinwalk [文件名]  #扫描文件中是否有隐藏文件\nbinwalk -e [文件名]  #将其中文件分离\n```\n\n### foremost\n\n```bash\nforemost [文件名]  #将其中文件分离\n```\n\n## 图片工具\n\n### stegsolve\n\n1. 切换通道，观察是否有异常。如果在某个通道图片有异常则可能是 LSB 隐写\n\n2. 可以逐帧观察 gif 动图\n\n### zsteg (png&bmp)\n\n用于检查是否有 LSB 隐写\n\n```bash\nzsteg xxx.png/bmp  #检查是否有LSB隐写\nzsteg xxx.png/bmp -a  #尝试所有已知的组合\nzsteg xxx.png/bmp -v  #显示细节\nzsteg -E \"[隐写方法]\" xxx.png/bmp > out.txt  #提取文件\n```\n\n### pngcheck (png)\n\n判断是否为 CRC 校验码错误，如果错误说明图片高度或宽度被修改\n\n```bash\npngcheck xxx.png  #检查CRC\n```\n\n### tweakPNG (png)\n\n可以检查 CRC 校验码，并可以修改图片的宽和高\n\n### steghide (jpg&bmp) <span id=\"jump\"></span>\n\n一个可以将文件隐藏到图片或音频中的工具\n\n```bash\nsteghide info xxx.jpg  #查看图片中嵌入的文件信息\nsteghide extract -sf xxx.jpg  #提取隐藏文件\nsteghide embed -cf [文件载体] -ef [待隐藏文件]  #将文件隐藏进载体\n```\n\n### stegdetect (jpg)\n\n用于检测 jpg 文件加密方式，包括：\n\n1. jsteg\n\n2. outguess\n\n3. jphide\n\n4. invisible secrets\n\n对应 j、o、p、i\n\n首先进入 stegdetect 所在目录，\n\n```powershell\n./stegdetect.exe -tjopi -s 10.0 xxx.jpg  #检测该图片用的是哪种加密\n./stegbreak.exe -r rules.ini -f password.txt -t p xxx.jpg  #若是jphide可用字典破解密码\n```\n\n### outguess (jpg)\n\n```bash\noutguess -k [密码] -r xxx.jpg out.txt  #解密\noutguess -k [密码] -d [要隐藏的文件] xxx.jpg yyy.jpg  #加密，xxx.jpg会覆盖yyy.jpg\n#密码可有可无\n```\n\n### f5-steganography (jpg&gif)\n\n首先进入 f5-steganography 所在目录，\n\n```powershell\njava Extract xxx.jpg -p [密码]  #解密\n```\n\n### gnuplot\n\n一个命令行的交互式绘图工具。我主要用来把存有像素点坐标的 txt 文件转化为图像\n\n格式要求：每个坐标占一行，x 轴的值与 y 轴的值中间由空格分开\n\n```powershell\ngnuplot  # 启动gnuplot\nplot pixel.txt  # 生成图像\n```\n\n也可以用来画函数图像\n\n```powershell\nplot sin(x)  # 画一个正弦图像\n```\n\n### gaps (jpg)\n\n拼图软件。如何安装与使用详见 <a href=\"https://www.zhuanzhi.ai/document/282c8a2293a31361d4c15b4451b5406a \" target=\"_blank\">gaps 教程</a>\n\n1. 构建拼图\n\n   ```bash\n   create_puzzle images/xxx.jpg --size=[每个拼图块的边长像素数] --destination=puzzle.jpg\n   ```\n\n2. 解决拼图\n\n   ```bash\n   gaps --image=puzzle.jpg --generations=[遗传代数] --population=[拼图个数] --size=[每个拼图块的边长像素数] --save\n    #不写size参数也可以\n   ```\n\n### QR Research\n\n扫二维码、生成二维码的工具。可以设置纠错等级和掩码\n\n### 隐形水印工具\n\n加上或提取盲水印\n\n## 压缩包工具\n\n### Advanced Archive Password Recovery\n\n破解 rar、zip 压缩包的密码\n\n### ZipCenOp (zip)\n\n用于解除伪加密，但无法检测是否为伪加密\n\n首先进入 ZipCenOp 所在目录，\n\n```powershell\njava -jar ZipCenOp.jar r xxx.zip  #解除伪加密\njava -jar ZipCenOp.jar e xxx.zip  #加上伪加密\n```\n\n### 7z\n\nUbuntu 自带，可以解压 vmdk 文件\n\n```bash\n7z x [文件名]  #解压文件\n```\n\n### tar.gz\n\nUbuntu 自带，可以解压 tar.gz 文件\n\n```bash\ntar -xzvf xxx.tar.gz  #解压文件\n```\n\n## 音频工具\n\n### Audacity\n\n观察音频的波形、频谱图\n\n### MP3Stego (mp3)\n\n首先进入 MP3Stego 所在目录，\n\n```powershell\n./Decode.exe -X -p [密码] xxx.mp3  #解密\n./Encode.exe -E [要隐藏的文件] -P pass xxx.wav out.mp3  #加密\n```\n\n### steghide\n\n与上方图片工具中 steghide 用法相同，[点此跳转](#jump)\n\n## 其他\n\n### uncompyle6\n\n反编译 pyc 文件\n\n```bash\nuncompyle6 xxx.pyc > xxx.py  #反编译\nuncompile -o . *.pyc  #将当前目录中所有的pyc文件反编译成pyc_dis源文件\n```\n\n### 010 Editor\n\n### WinHex\n\n### Silent Eye\n\n### NTFS Streams Editor\n","tags":["Misc","工具"]},{"title":"Hello World","url":"/2020/06/27/hello-world/","content":"\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n```bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n```bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n```bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n```bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","tags":["Hexo"]}]